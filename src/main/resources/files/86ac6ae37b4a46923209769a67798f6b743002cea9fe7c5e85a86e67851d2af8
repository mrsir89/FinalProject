
카드 결제 하면 포인트를 준다.

트랜잭션 담당하는 회사 따로 카드 결재 회사 따로 2개의 은행


은행에서 계좌? 결제 번호랑 결재회사의 결제 번호? 랑 비교하여 확인

3축  - 페이지 관리? 페이지 보이는것?  데이터의 형태 주의 고려 하여 데이터 디자인
      - 고객이 보일 데이터
      - 관리자는 다 봐야 한다.  보일 수 있는거 확인
      - 비지니스 로직층에서 해야 한다.
      - 모든 데이터는 데이터베이스에서 다 가지고 있어야 한다.
      - 상인도 봐야 할것만 보여줘야 한다.

merchant_applicants
통계 관련 - 보여줄 정보는 저장해 놓고 보여주기



초기 설계

user 중심으로 설계

user에서 커스터머 user-> 상인

상인 중으로 설계

관계

설계는 초기에 그려 보기..


트랜잭션에 관한 설계
트랜잭션으로 하나뿐이 아니고 여러개를 확인해 봐야 한다. 

token 데이터 덩어리

관리할 고객등 이러한 데이터의 삭제는 보관하고 있어야 통계나 이런거에 
깨지는거나 아무튼 그런거에 필요함 
그래서 삭제를 필요하지 않은 부분들은 삭제라는건 필요하지 않은 부분은 null 이나 더미 이런식으로 관리 한다.

통계를 위해서? 아님 판매를 위해서든 
물품을 나누는 것을 생각해 봐야 한다.
카테고리 1, 다른 아이디를 만들던지 서브 아이디 그 아이디에서는 그 물품을 판매 하는것

데이터 타입 JASON LIST 한 컬럼에 여러개의 데이터를 저장할 수 있다.


ACL access control list 
페이스북의 scop <-- 권한 이랑 비슷 함.

email 인증 password 리셋 구조 같은 테이블 사용 가능 따로 테이블을 만들어 사용
이사람이 패스워드 리셋인지 가 가입단계인지 확인 가능 이 테이블에서 구분해준다.

범위 조절...
추가를 해도 영향이 없는 그런거

도메인 지식

캐싱 화면 이미지

디폴트 값 중요!

